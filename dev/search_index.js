var documenterSearchIndex = {"docs":
[{"location":"#PackedVectorsOfVectors","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors","text":"","category":"section"},{"location":"","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors","text":"Modules = [PackedVectorsOfVectors]\nPrivate = false","category":"page"},{"location":"#PackedVectorsOfVectors.PackedVectorOfVectors","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors.PackedVectorOfVectors","text":"PackedVectorOfVectors{P,V,E} <: AbstractVector{E}\n\nVector of vectors, stored as a single long vector v::V and a vector of pointers p::P indicating the subvector boundaries.\n\nPackedVectorOfVectors is roughly equivalent to SparseMatrixCSC without the rowval vector.\n\n\n\n\n\n","category":"type"},{"location":"#PackedVectorsOfVectors.allocate_packed-Tuple{Type, Any, Any}","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors.allocate_packed","text":"allocate_packed(T, init, n) -> PackedVectorOfVectors\n\nAllocate a packed vector of vectors with nested element type T such that the kth nested vector has length nth(n,k). See the documentation of Vector{T}(init,n) regarding the meaning of init.\n\nExamples\n\njulia> allocate_packed(Ref{Int}, undef, [1,2,3])\n3-element pack(::Vector{Vector{Ref{Int64}}}):\n [#undef]\n [#undef, #undef]\n [#undef, #undef, #undef]\n\n\n\n\n\n","category":"method"},{"location":"#PackedVectorsOfVectors.pack-Tuple{Any}","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors.pack","text":"pack([T,] vv) -> PackedVectorOfVectors\n\nConvert the vector of vectors vv to its packed representation. If T is provided, then the elements of the nested vector are converted to this type.\n\nExample\n\njulia> pack([[1,2],[3]])\n2-element pack(::Vector{Vector{Int64}}):\n [1, 2]\n [3]\n\njulia> pack(Float64, [[1,2],[3]])\n2-element pack(::Vector{Vector{Float64}}):\n [1.0, 2.0]\n [3.0]\n\n\n\n\n\n","category":"method"},{"location":"#PackedVectorsOfVectors.packed_fill-Tuple{Any, Any}","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors.packed_fill","text":"packed_fill(x,n) -> pv::PackedVectorOfVectors\n\nCreate a packed vector of vectors such that pv[k] == fill(x, nth(n,k)).\n\n\n\n\n\n","category":"method"},{"location":"#PackedVectorsOfVectors.packed_indices-Tuple{Any}","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors.packed_indices","text":"packed_indices(n) -> pv::PackedVectorOfVectors\n\nPacked vector of vectors such that the kth nested vector has length nth(n,k) and pv[k][i] is the index in the flattened vector of the ith element in the kth nested vector.\n\nExamples\n\njulia> packed_indices([2,3])\n2-element pack(::Vector{Vector{Int64}}):\n 1:2\n 3:5\n\n\n\n\n\n","category":"method"},{"location":"#PackedVectorsOfVectors.packed_ones-Tuple{Type, Any}","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors.packed_ones","text":"packed_ones([T=Float64,] n) -> pv::PackedVectorOfVectors\n\nCreate a packed vector of vectors such that pv[k] == ones(T, nth(n,k)).\n\n\n\n\n\n","category":"method"},{"location":"#PackedVectorsOfVectors.packed_zeros-Tuple{Type, Any}","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors.packed_zeros","text":"packed_zeros([T=Float64,] n) -> pv::PackedVectorOfVectors\n\nCreate a packed vector of vectors such that pv[k] == zeros(T, nth(n,k)).\n\n\n\n\n\n","category":"method"},{"location":"","page":"PackedVectorsOfVectors","title":"PackedVectorsOfVectors","text":"transpose(::PackedVectorOfVectors)","category":"page"},{"location":"#Base.transpose-Tuple{PackedVectorOfVectors}","page":"PackedVectorsOfVectors","title":"Base.transpose","text":"transpose(pv::PackedVectorOfVectors[, n = maximum(maximum.(pv))) -> PackedVectorOfVectors\n\nInterpret pv as the sparsity pattern of a sparse matrix and compute the sparsity pattern of its transpose.\n\nThe nested eltype of pv must be Int.\n\nExamples\n\njulia> transpose(pack([[1,2],[2]]))\n2-element pack(::Vector{Vector{Int64}}):\n [1]\n [1, 2]\n\n\n\n\n\n","category":"method"}]
}
